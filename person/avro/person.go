// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Person.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Person struct {
	Name string `json:"name"`

	Lastname string `json:"lastname"`

	Edad *UnionNullInt `json:"edad"`

	Dni int32 `json:"dni"`
}

const PersonAvroCRC64Fingerprint = "\xe4\xc3>D\xef\f=\xbf"

func NewPerson() Person {
	r := Person{}
	r.Edad = nil
	return r
}

func DeserializePerson(r io.Reader) (Person, error) {
	t := NewPerson()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonFromSchema(r io.Reader, schema string) (Person, error) {
	t := NewPerson()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePerson(r Person, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lastname, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Edad, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Dni, w)
	if err != nil {
		return err
	}
	return err
}

func (r Person) Serialize(w io.Writer) error {
	return writePerson(r, w)
}

func (r Person) Schema() string {
	return "{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"lastname\",\"type\":\"string\"},{\"default\":null,\"name\":\"edad\",\"type\":[\"null\",\"int\"]},{\"name\":\"dni\",\"type\":\"int\"}],\"name\":\"Demo.Kafka.Event.Person\",\"type\":\"record\"}"
}

func (r Person) SchemaName() string {
	return "Demo.Kafka.Event.Person"
}

func (_ Person) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Person) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Person) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Person) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Person) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Person) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Person) SetString(v string)   { panic("Unsupported operation") }
func (_ Person) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Person) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		w := types.String{Target: &r.Lastname}

		return w

	case 2:
		r.Edad = NewUnionNullInt()

		return r.Edad
	case 3:
		w := types.Int{Target: &r.Dni}

		return w

	}
	panic("Unknown field index")
}

func (r *Person) SetDefault(i int) {
	switch i {
	case 2:
		r.Edad = nil
		return
	}
	panic("Unknown field index")
}

func (r *Person) NullField(i int) {
	switch i {
	case 2:
		r.Edad = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Person) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Person) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Person) HintSize(int)                     { panic("Unsupported operation") }
func (_ Person) Finalize()                        {}

func (_ Person) AvroCRC64Fingerprint() []byte {
	return []byte(PersonAvroCRC64Fingerprint)
}

func (r Person) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["lastname"], err = json.Marshal(r.Lastname)
	if err != nil {
		return nil, err
	}
	output["edad"], err = json.Marshal(r.Edad)
	if err != nil {
		return nil, err
	}
	output["dni"], err = json.Marshal(r.Dni)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Person) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lastname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lastname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["edad"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Edad); err != nil {
			return err
		}
	} else {
		r.Edad = NewUnionNullInt()

		r.Edad = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dni"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dni); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dni")
	}
	return nil
}
