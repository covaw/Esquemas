// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     Phase.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

// import "C"

var _ = fmt.Printf

type PhaseData struct {
	EndDate *UnionNullLong `json:"EndDate"`

	StartDate *UnionNullLong `json:"StartDate"`

	AdvanceNotice *UnionNullString `json:"AdvanceNotice"`

	DecouplingCause *UnionNullString `json:"DecouplingCause"`

	Compensation bool `json:"Compensation"`

	Holidays bool `json:"Holidays"`

	Real bool `json:"Real"`

	RecognizedStartDate bool `json:"RecognizedStartDate"`

	Salary bool `json:"Salary"`

	Status bool `json:"Status"`

	Id int32 `json:"Id"`

	EmployeeId int32 `json:"EmployeeId"`
}

const PhaseDataAvroCRC64Fingerprint = "\xf7\x01\xd7i\xa9È­%"

func NewPhaseData() PhaseData {
	r := PhaseData{}
	r.EndDate = nil
	r.StartDate = nil
	r.AdvanceNotice = nil
	r.DecouplingCause = nil
	return r
}

func DeserializePhaseData(r io.Reader) (PhaseData, error) {
	t := NewPhaseData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePhaseDataFromSchema(r io.Reader, schema string) (PhaseData, error) {
	t := NewPhaseData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePhaseData(r PhaseData, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.EndDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.StartDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AdvanceNotice, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DecouplingCause, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Compensation, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Holidays, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Real, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.RecognizedStartDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Salary, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.EmployeeId, w)
	if err != nil {
		return err
	}
	return err
}

func (r PhaseData) Serialize(w io.Writer) error {
	return writePhaseData(r, w)
}

func (r PhaseData) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EndDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"StartDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"AdvanceNotice\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DecouplingCause\",\"type\":[\"null\",\"string\"]},{\"name\":\"Compensation\",\"type\":\"boolean\"},{\"name\":\"Holidays\",\"type\":\"boolean\"},{\"name\":\"Real\",\"type\":\"boolean\"},{\"name\":\"RecognizedStartDate\",\"type\":\"boolean\"},{\"name\":\"Salary\",\"type\":\"boolean\"},{\"name\":\"Status\",\"type\":\"boolean\"},{\"name\":\"Id\",\"type\":\"int\"},{\"name\":\"EmployeeId\",\"type\":\"int\"}],\"name\":\"Andreani.RHpro.Events.Common.PhaseData\",\"type\":\"record\"}"
}

func (r PhaseData) SchemaName() string {
	return "Andreani.RHpro.Events.Common.PhaseData"
}

func (_ PhaseData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PhaseData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PhaseData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PhaseData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PhaseData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PhaseData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PhaseData) SetString(v string)   { panic("Unsupported operation") }
func (_ PhaseData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PhaseData) Get(i int) types.Field {
	switch i {
	case 0:
		r.EndDate = NewUnionNullLong()

		return r.EndDate
	case 1:
		r.StartDate = NewUnionNullLong()

		return r.StartDate
	case 2:
		r.AdvanceNotice = NewUnionNullString()

		return r.AdvanceNotice
	case 3:
		r.DecouplingCause = NewUnionNullString()

		return r.DecouplingCause
	case 4:
		w := types.Boolean{Target: &r.Compensation}

		return w

	case 5:
		w := types.Boolean{Target: &r.Holidays}

		return w

	case 6:
		w := types.Boolean{Target: &r.Real}

		return w

	case 7:
		w := types.Boolean{Target: &r.RecognizedStartDate}

		return w

	case 8:
		w := types.Boolean{Target: &r.Salary}

		return w

	case 9:
		w := types.Boolean{Target: &r.Status}

		return w

	case 10:
		w := types.Int{Target: &r.Id}

		return w

	case 11:
		w := types.Int{Target: &r.EmployeeId}

		return w

	}
	panic("Unknown field index")
}

func (r *PhaseData) SetDefault(i int) {
	switch i {
	case 0:
		r.EndDate = nil
		return
	case 1:
		r.StartDate = nil
		return
	case 2:
		r.AdvanceNotice = nil
		return
	case 3:
		r.DecouplingCause = nil
		return
	}
	panic("Unknown field index")
}

func (r *PhaseData) NullField(i int) {
	switch i {
	case 0:
		r.EndDate = nil
		return
	case 1:
		r.StartDate = nil
		return
	case 2:
		r.AdvanceNotice = nil
		return
	case 3:
		r.DecouplingCause = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PhaseData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PhaseData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PhaseData) HintSize(int)                     { panic("Unsupported operation") }
func (_ PhaseData) Finalize()                        {}

func (_ PhaseData) AvroCRC64Fingerprint() []byte {
	return []byte(PhaseDataAvroCRC64Fingerprint)
}

func (r PhaseData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EndDate"], err = json.Marshal(r.EndDate)
	if err != nil {
		return nil, err
	}
	output["StartDate"], err = json.Marshal(r.StartDate)
	if err != nil {
		return nil, err
	}
	output["AdvanceNotice"], err = json.Marshal(r.AdvanceNotice)
	if err != nil {
		return nil, err
	}
	output["DecouplingCause"], err = json.Marshal(r.DecouplingCause)
	if err != nil {
		return nil, err
	}
	output["Compensation"], err = json.Marshal(r.Compensation)
	if err != nil {
		return nil, err
	}
	output["Holidays"], err = json.Marshal(r.Holidays)
	if err != nil {
		return nil, err
	}
	output["Real"], err = json.Marshal(r.Real)
	if err != nil {
		return nil, err
	}
	output["RecognizedStartDate"], err = json.Marshal(r.RecognizedStartDate)
	if err != nil {
		return nil, err
	}
	output["Salary"], err = json.Marshal(r.Salary)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["EmployeeId"], err = json.Marshal(r.EmployeeId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PhaseData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EndDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDate); err != nil {
			return err
		}
	} else {
		r.EndDate = NewUnionNullLong()

		r.EndDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartDate); err != nil {
			return err
		}
	} else {
		r.StartDate = NewUnionNullLong()

		r.StartDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AdvanceNotice"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdvanceNotice); err != nil {
			return err
		}
	} else {
		r.AdvanceNotice = NewUnionNullString()

		r.AdvanceNotice = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DecouplingCause"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DecouplingCause); err != nil {
			return err
		}
	} else {
		r.DecouplingCause = NewUnionNullString()

		r.DecouplingCause = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Compensation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Compensation); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Compensation")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Holidays"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Holidays); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Holidays")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Real"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Real); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Real")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecognizedStartDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecognizedStartDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for RecognizedStartDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Salary"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Salary); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Salary")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EmployeeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EmployeeId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EmployeeId")
	}
	return nil
}
